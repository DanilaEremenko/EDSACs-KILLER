T<delete>S[var_start_var]
A<defDigit_copy>S[defDigit_copy, Считаем переполнения из + в -]
A<defDigit>S[defDigit]
T<defDigit_copy>S[defDigit_copy сохраняем]
E110S[void -1_fromIndex,Безусловное вычитание 1]
A<defDigit_copy>S[defDigit_copy]
G<void add_One_To_CurrentRazr (+)->(-)>S[var_jump1_var,void add_One_To_CurrentRazr (+)->(-)]
E<start>S[start]
T<delete>[start 2]
A<defDigit_copy>S[defDigit_copy,var_start 2_var]
A<defDigit>S
T<defDigit_copy>S[defDigit_copy сохраняем]
E<void subtOnefromIndex2>S[void -1_fromIndex,Безусловное вычитание 1]
A<defDigit_copy>S[defDigit_copy]
E<void add_One_To_CurrentRazr (-)->(+)>S[var_jump2_var,void add_One_To_CurrentRazr (-)->(+)]
G<start 2>S[start 2]
A<index>S[index]
E<start>S[var_cycleEnd_var,start,Проверяем что цикл не закончился]
T<delete>S[var_nextLongStep_var, Провярем не закончилось ли заполнение]
A<число заполняемых разрядов>S[число заполняемых разрядов]
S<ONE>S[ONE]
U<число заполняемых разрядов>S
G<exit>S[exit]
T<delete>S[Сдвигаем исходное число влево на 1]
A<defDigit>S[defDig]
L0L
U<defDigit>S[сохраняем изменения]
U<defDigit_copy>S[сохраняем изменения]
T<delete>S[index=9]
A<defIndex>S[defIndex]
T<index>S[index]
T<delete>S[Меняем индексы в методах add_One_To_CurrentRazr]
A<TWO>S[TWO_FOR_CHANGE_RAZR]
A<changedInstructionOne>S[]
T<changedInstructionOne>S
A<TWO>S[TWO_FOR_CHANGE_RAZR]
A<changedInstructionTwo>S[]
T<changedInstructionTwo>S
A<TWO>S[TWO_FOR_CHANGE_RAZR]
A<changedInstructionThree>S[]
T<changedInstructionThree>S
A<TWO>S[TWO_FOR_CHANGE_RAZR]
A<changedInstructionFour>S
T<changedInstructionFour>S
E<start>S[start,БЕЗУСЛОВНО]
Z0S[var_exit_var-----------------КОНСТАНТЫ---------------]
S0S[var_defDigit_var=0.75]
S0S[var_defDigit_copy_var=0.75]
P0L[var_ONE_var]
P0L[var_defIndex_var i=9]
P0L[var_index_var i=9]
P1S[var_TWO_var,для изменения индекс текущего разряда]
P8S[var_число заполняемых разрядов_var]
P0S[var_firstRazr_var]
P0S[2 разряд]
P0S[3 разряд]
P0S[4 разряд]
P0S[5 разряд]
P0S[6 разряд]
P0S[7 разряд]
P0S[8 разряд]
P0S[9 разряд]
P0S[10 разряд]
P0S[11 разряд]
P0S[12 разряд]
P0S[13 разряд]
P0S[14 разряд]
P0S[15 разряд]
P0S[16 разряд------------МЕТОДЫ---------------]
T<delete>S[var_void add_One_To_CurrentRazr (+)->(-)_var]
A<firstRazr>S[1 разряд,var_changedInstructionOne_var]
A<ONE>S
T<firstRazr>S[1 разряд,var_changedInstructionTwo_var ]
E<start 2>S[goto+2,БЕЗУСЛОВНО]
T<delete>S[var_void add_One_To_CurrentRazr (-)->(+)_var]
A<firstRazr>S[1 разряд,var_changedInstructionThree_var]
A<ONE>S[ONE]
T<firstRazr>S[1 разряд,var_changedInstructionFour_var]
E<cycleEnd>S[goto+2,БЕЗУСЛОВНО]
T<delete>S[var_void subtOnefromIndex1_var]
A<index>S[index, Вычитаем 1 из текущего состояния цикла]
G<nextLongStep>S[проверка индекса массива]
S<ONE>S[ONE, Вычитаем 1]
T<index>S[index, Сохраняем в переменную цикла]
E<jump1>S[goto+1,БЕЗУСЛОВНО]
T<delete>S[var_void subtOnefromIndex2_var]
A<index>S[index, Вычитаем 1 из текущего состояния цикла]
G<nextLongStep>S[проверка индекса массива]
S<ONE>S[ONE, Вычитаем 1]
T<index>S[index, Сохраняем в переменную цикла]
E<jump2>S[goto+1,БЕЗУСЛОВНО]
Z0S
var_delete_var