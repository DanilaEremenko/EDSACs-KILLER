T<delete>S[var_startSignRec_var,ОПРЕДЕЛЯЕМ ЗНАК--------------------------------------]
A<defDigit>S[defDigit]
E<void sign is plus>S[void sign is plus]
G<void sign is minus>S[void sign is minus]
T<delete>S[var_void sign is plus_var]
A<ONE>S
T<sign>S
E<start>S
T<delete>S[var_void sign is minus_var]
A<ZERO>S
T<sign>S
E<start>S
T<delete>S[var_start_var, Отслеживаем переполнения из "+" в "-"----------------------]
A<defDigit_copy>S[defDigit_copy]
A<defDigit>S[defDigit]
T<defDigit_copy>S[defDigit_copy ]
E<void subtOnefromIndex1>S[void subtOnefromIndex1]
A<defDigit_copy>S[var_jump1_var,defDigit_copy]
G<void add_One_To_CurrentRazr (+)->(-)>S[void add_One_To_CurrentRazr (+)->(-)]
E<start>S[start]
T<delete>S[var_start 2_var, Отслеживаем переполнения из "-" в "+"--------------------]
A<defDigit_copy>S[defDigit_copy]
A<defDigit>S
T<defDigit_copy>S[defDigit_copy]
E<void subtOnefromIndex2>S[void subtOnefromIndex2]
A<defDigit_copy>S[var_jump2_var,defDigit_copy]
E<void add_One_To_CurrentRazr (-)->(+)>S[void add_One_To_CurrentRazr (-)->(+)]
G<start 2>S[start 2]
A<index>S[index,Проверяем что цикл не закончился-------------------------------------]
E<start>S[var_cycleEnd_var,start]
T<delete>S[var_nextLongStep_var, Провярем не закончилось ли заполнение разрядов------]
A<число заполняемых разрядов>S[число заполняемых разрядов]
S<ONE>S[ONE]
U<число заполняемых разрядов>S
G<exit>S[exit]
T<delete>S[Сдвигаем исходное число влево на 1 разряд---------------------------------]
A<defDigit>S[defDig]
L0L
U<defDigit>S[defDigit]
U<defDigit_copy>S[defDigit_copy]
T<delete>S[index]
A<defIndex>S[defIndex]
T<index>S[index]
T<delete>S[Меняем адрес вычисляемого разряда в методах add_One_To_CurrentRazr--------]
A<TWO>S[TWO]
A<changedInstructionOne>S[changedInstructionOne]
T<changedInstructionOne>S[changedInstructionOne]
A<TWO>S[TWO]
A<changedInstructionTwo>S[changedInstructionTwo]
T<changedInstructionTwo>S[changedInstructionTwo]
A<TWO>S[TWO_FOR_CHANGE_RAZR]
A<changedInstructionThree>S[changedInstructionThree]
T<changedInstructionThree>S[changedInstructionThree]
A<TWO>S[TWO_FOR_CHANGE_RAZR]
A<changedInstructionFour>S[changedInstructionFour]
T<changedInstructionFour>S[changedInstructionFour]
E<start>S[start,БЕЗУСЛОВНО]
Z0S[var_exit_var,-----------------КОНСТАНТЫ------------------------------------------]
P0S[var_ZERO_var]
P0L[var_ONE_var]
P1S[var_TWO_var,------------------ПЕРЕМЕННЫЕ-----------------------------------------]
P000100000000000000S[var_defDigit_var=0.75]
P000100000000000000S[var_defDigit_copy_var=0.75]
P4S[var_defIndex_var i=8]
P4S[var_index_var i=8]
P8S[var_число заполняемых разрядов_var]
P0S[var_sign_var]
P0S[var_coma_var]
P0S[var_firstRazr_var]
P0S[2 разряд]
P0S[3 разряд]
P0S[4 разряд]
P0S[5 разряд]
P0S[6 разряд]
P0S[7 разряд]
P0S[8 разряд]
P0S[9 разряд]
P0S[10 разряд]
P0S[11 разряд]
P0S[12 разряд]
P0S[13 разряд]
P0S[14 разряд]
P0S[15 разряд]
P0S[16 разряд------------МЕТОДЫ------------------------------------------------------]
T<delete>S[var_void add_One_To_CurrentRazr (+)->(-)_var,    {]
A<firstRazr>S[var_changedInstructionOne_var]
A<ONE>S
T<firstRazr>S[var_changedInstructionTwo_var]
E<start 2>S[ВОЗВРАТ В СТРОЧКУ ВЫЗОВА+1,                     }]
T<delete>S[var_void add_One_To_CurrentRazr (-)->(+)_var,    {]
A<firstRazr>S[var_changedInstructionThree_var]
A<ONE>S[ONE]
T<firstRazr>S[var_changedInstructionFour_var]
E<cycleEnd>S[ВОЗВРАТ В СТРОЧКУ ВЫЗОВА+1,                    }]
T<delete>S[var_void subtOnefromIndex1_var,                  {]
A<index>S[index]
G<nextLongStep>S[проверка индекса массива]
S<ONE>S[ONE]
T<index>S[index]
E<jump1>S[ВОЗВРАТ В СТРОЧКУ ВЫЗОВА+2,                       }]
T<delete>S[var_void subtOnefromIndex2_var,                  {]
A<index>S[index]
G<nextLongStep>S[проверка индекса массива]
S<ONE>S[ONE]
T<index>S[index]
E<jump2>S[ВОЗВРАТ В СТРОЧКУ ВЫЗОВА+2,                       }]
Z0S
var_delete_var